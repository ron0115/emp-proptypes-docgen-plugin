// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component fixture DefaultPropValue.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface DefaultPropValueComponentProps {
  /**
   * Button color.
   *
   * @default blue
   **/
  color: \\"blue\\" | \\"green\\";

  /**
   * Button counter.
   */
  counter?: number;

  /**
   * Button disabled.
   */
  disabled?: boolean;
}

/**
 * Component with a prop with a default value.
 */
export const DefaultPropValueComponent: React.FC<DefaultPropValueComponentProps> = (
  props
) => (
  <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
    {props.counter}
    {props.children}
  </button>
);

DefaultPropValueComponent.defaultProps = {
  counter: 123,
  disabled: false,
};

try {
    // @ts-ignore
    DefaultPropValueComponent.displayName = \\"DefaultPropValueComponent\\";
    // @ts-ignore
    DefaultPropValueComponent.empPropTypes = { \\"defined\\": { description: \\"Component with a prop with a default value.\\" }, \\"name\\": \\"DefaultPropValueComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": { value: \\"blue\\" }, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } }, \\"counter\\": { \\"defaultValue\\": { value: 123 }, \\"description\\": \\"Button counter.\\", \\"label\\": \\"counter\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"disabled\\": { \\"defaultValue\\": { value: false }, \\"description\\": \\"Button disabled.\\", \\"label\\": \\"disabled\\", \\"required\\": false, \\"type\\": \\"Switch\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture HyphenatedPropName.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface HyphenatedPropNameProps {
  /** Button color. */
  \\"button-color\\": \\"blue\\" | \\"green\\";
}

/**
 * A component with a hyphenated prop name.
 */
export const HyphenatedPropNameComponent: React.FC<HyphenatedPropNameProps> = (
  props
) => (
  <button style={{ backgroundColor: props[\\"button-color\\"] }}>
    {props.children}
  </button>
);

try {
    // @ts-ignore
    HyphenatedPropNameComponent.displayName = \\"HyphenatedPropNameComponent\\";
    // @ts-ignore
    HyphenatedPropNameComponent.empPropTypes = { \\"defined\\": { description: \\"A component with a hyphenated prop name.\\" }, \\"name\\": \\"HyphenatedPropNameComponent\\", \\"props\\": { \\"button-color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"button-color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultiProps.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultiPropsComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";

  /** Button size. */
  size: \\"small\\" | \\"large\\";
}

/**
 * This is a component with multiple props.
 */
export const MultiPropsComponent: React.FC<MultiPropsComponentProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultiPropsComponent.displayName = \\"MultiPropsComponent\\";
    // @ts-ignore
    MultiPropsComponent.empPropTypes = { \\"defined\\": { description: \\"This is a component with multiple props.\\" }, \\"name\\": \\"MultiPropsComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } }, \\"size\\": { \\"defaultValue\\": null, \\"description\\": \\"Button size.\\", \\"label\\": \\"size\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"small\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"large\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultilineDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilineDescriptionProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with a multiline description.
 *
 * Second line.
 */
export const MultilineDescriptionComponent: React.FC<MultilineDescriptionProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultilineDescriptionComponent.displayName = \\"MultilineDescriptionComponent\\";
    // @ts-ignore
    MultilineDescriptionComponent.empPropTypes = { \\"defined\\": { description: \\"A component with a multiline description.\\\\n\\\\nSecond line.\\" }, \\"name\\": \\"MultilineDescriptionComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultilinePropDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilinePropDescriptionComponentProps {
  /**
   * This is a multiline prop description.
   *
   * Second line.
   */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with multiline prop description.
 */
export const MultilinePropDescriptionComponent: React.FC<MultilinePropDescriptionComponentProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultilinePropDescriptionComponent.displayName = \\"MultilinePropDescriptionComponent\\";
    // @ts-ignore
    MultilinePropDescriptionComponent.empPropTypes = { \\"defined\\": { description: \\"A component with multiline prop description.\\" }, \\"name\\": \\"MultilinePropDescriptionComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"This is a multiline prop description.\\\\n\\\\nSecond line.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture Simple.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface SimpleComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A simple component.
 */
export const SimpleComponent: React.FC<SimpleComponentProps> = (props) => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
    // @ts-ignore
    SimpleComponent.displayName = \\"SimpleComponent\\";
    // @ts-ignore
    SimpleComponent.empPropTypes = { \\"defined\\": { description: \\"A simple component.\\" }, \\"name\\": \\"SimpleComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture TextOnlyComponent.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

/**
 * A component with only text content wrapped in a div.
 *
 * Ref: https://github.com/strothj/react-docgen-typescript-loader/issues/7
 */
export const SimpleComponent: React.FC<{}> = () => (
  <div>Test only component</div>
);

try {
    // @ts-ignore
    SimpleComponent.displayName = \\"SimpleComponent\\";
    // @ts-ignore
    SimpleComponent.empPropTypes = { \\"defined\\": { description: \\"A component with only text content wrapped in a div.\\\\n\\\\nRef: https://github.com/strothj/react-docgen-typescript-loader/issues/7\\" }, \\"name\\": \\"SimpleComponent\\", \\"props\\": {} };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`generates value info for enums 1`] = `
"import * as React from \\"react\\";

interface DefaultPropValueComponentProps {
  /**
   * Button color.
   *
   * @default blue
   **/
  color: \\"blue\\" | \\"green\\";

  /**
   * Button counter.
   */
  counter?: number;

  /**
   * Button disabled.
   */
  disabled?: boolean;
}

/**
 * Component with a prop with a default value.
 */
export const DefaultPropValueComponent: React.FC<DefaultPropValueComponentProps> = (
  props
) => (
  <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
    {props.counter}
    {props.children}
  </button>
);

DefaultPropValueComponent.defaultProps = {
  counter: 123,
  disabled: false,
};

try {
    // @ts-ignore
    DefaultPropValueComponent.displayName = \\"DefaultPropValueComponent\\";
    // @ts-ignore
    DefaultPropValueComponent.empPropTypes = { \\"defined\\": { description: \\"Component with a prop with a default value.\\" }, \\"name\\": \\"DefaultPropValueComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": { value: \\"blue\\" }, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } }, \\"counter\\": { \\"defaultValue\\": { value: 123 }, \\"description\\": \\"Button counter.\\", \\"label\\": \\"counter\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"disabled\\": { \\"defaultValue\\": { value: false }, \\"description\\": \\"Button disabled.\\", \\"label\\": \\"disabled\\", \\"required\\": false, \\"type\\": \\"Switch\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;
