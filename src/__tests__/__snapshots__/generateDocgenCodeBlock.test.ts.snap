// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component fixture DefaultPropValue.tsx has code block generated 1`] = `
"// import * as React from \\"react\\";

// interface DefaultPropValueComponentProps {
//   /**
//    * Button color.
//    *
//    * @default blue
//    **/
//   color: \\"blue\\" | \\"green\\";

//   /**
//    * Button counter.
//    */
//   counter?: number;

//   /**
//    * Button disabled.
//    */
//   disabled?: boolean;
// }

// /**
//  * Component with a prop with a default value.
//  */
// export const DefaultPropValueComponent: React.FC<DefaultPropValueComponentProps> = (
//   props
// ) => (
//   <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
//     {props.counter}
//     {props.children}
//   </button>
// );

// DefaultPropValueComponent.defaultProps = {
//   counter: 123,
//   disabled: false,
// };
import { genStyles } from \\"@/utils\\";
import React, { HTMLAttributes, useEffect, useState } from \\"react\\";
import defaultStyles from \\"./index.module.scss\\";
export type CircleProgressType = {
  r: number;
  percent?: number;
  strokeWidth?: number;
  borderOffset?: number;
  visible?: boolean;
  edgeSlot?: React.ReactNode;
  centerSlot?: React.ReactNode;
  edgeStyle?: React.HTMLAttributes<HTMLDivElement>[\\"style\\"];
  centerStyle?: React.HTMLAttributes<HTMLDivElement>[\\"style\\"];
};

const styles = genStyles(\\"ge-circle-progress\\", defaultStyles);
/** 环形进度条 */
export const CircleProgress = ({
  r,
  percent = 0,
  strokeWidth = 8,
  borderOffset = 4,
  visible = true,
  edgeSlot,
  centerSlot,
  centerStyle,
  edgeStyle: edgeStyleProps,
  ...otherProps
}: CircleProgressType) => {
  const [edgeStyle, setEdgeStyle] = useState({
    transform: \\"\\",
  });

  const size = {
    width: 2 * r + 2 * strokeWidth + 2 * borderOffset,
    height: 2 * r + 2 * strokeWidth + 2 * borderOffset,
  };

  // 定位edge的位置
  const perimeter = 2 * r * Math.PI;
  const strokeDashoffset = perimeter * (1 - percent);
  const offsetR = r + strokeWidth + borderOffset;
  const circleStyle = {
    strokeWidth: strokeWidth + \\"px\\",
  };
  const circleProps = {
    r: r,
    cx: offsetR,
    cy: offsetR,
  };
  // centerXAxis
  const a = offsetR;
  // centerYAxis
  const b = offsetR;

  // const edgeY = b - offsetR * Math.sqrt(1 - Math.sin(360 * percent) ** 2)
  // const edgeX = a + offsetR * Math.sin(360 * percent)
  // 逆时针，所以x用gsin，y用cos
  const edgeX = a + offsetR * Math.sin((360 * percent * Math.PI) / 180);
  const edgeY = b - offsetR * Math.cos((360 * percent * Math.PI) / 180);

  // 修正edge的位置
  useEffect(() => {
    let transform = \\"\\";
    if (percent > 0.5 && percent <= 1) {
      transform += \`translateX(-100%)\`;
    }

    if ((percent >= 0 && percent < 0.25) || (percent > 0.75 && percent <= 1)) {
      transform += \`translateY(-100%)\`;
    }
    setEdgeStyle({
      transform,
    });
  }, [percent]);

  // if (p)
  return (
    <div
      className={styles.container}
      {...otherProps}
      style={{
        width: size.width + \\"px\\",
        height: size.height + \\"px\\",
        display: visible ? \\"block\\" : \\"none\\",
        // ...otherProps.style,
      }}
    >
      <svg
        className={styles.svg}
        {...size}
        // viewPort=\\"0 0 100 100\\"
        // version=\\"1.1\\"
        // xmlns=\\"http://www.w3.org/2000/svg\\"
      >
        <circle
          className={styles.circle}
          {...circleProps}
          fill=\\"transparent\\"
          strokeDasharray={2 * r * Math.PI}
          strokeDashoffset=\\"0\\"
          style={circleStyle}
        />
        <circle
          className={styles.bar}
          style={circleStyle}
          {...circleProps}
          // 中间是透明
          fill=\\"transparent\\"
          strokeDasharray={2 * r * Math.PI}
          strokeDashoffset={strokeDashoffset}
          transform={\`rotate(-90, \${offsetR}, \${offsetR})\`}
        />
      </svg>
      <div className={styles.centerSlot} style={centerStyle}>
        {centerSlot}
      </div>
      <div
        // ref={edgeRef}
        className={styles.edge}
        style={{
          position: \\"absolute\\",
          left: edgeX + \\"px\\",
          top: edgeY + \\"px\\",
          ...edgeStyle,
          ...edgeStyleProps,
        }}
      >
        {edgeSlot}
      </div>
    </div>
  );
};
export default CircleProgress;

try {
    // @ts-ignore
    CircleProgress.displayName = \\"CircleProgress\\";
    // @ts-ignore
    CircleProgress.empPropTypes = { \\"defined\\": { description: \\"\\\\u73AF\\\\u5F62\\\\u8FDB\\\\u5EA6\\\\u6761\\" }, \\"name\\": \\"CircleProgress\\", \\"props\\": { \\"r\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"r\\", \\"required\\": true, \\"type\\": \\"InputNumber\\" }, \\"percent\\": { \\"defaultValue\\": 0, \\"description\\": \\"\\", \\"label\\": \\"percent\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"strokeWidth\\": { \\"defaultValue\\": 8, \\"description\\": \\"\\", \\"label\\": \\"strokeWidth\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"borderOffset\\": { \\"defaultValue\\": 4, \\"description\\": \\"\\", \\"label\\": \\"borderOffset\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"visible\\": { \\"defaultValue\\": true, \\"description\\": \\"\\", \\"label\\": \\"visible\\", \\"required\\": false, \\"type\\": \\"Switch\\" }, \\"edgeSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"centerSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"edgeStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" }, \\"centerStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }
try {
    // @ts-ignore
    DefaultPropValue.displayName = \\"DefaultPropValue\\";
    // @ts-ignore
    DefaultPropValue.empPropTypes = { \\"defined\\": { description: \\"\\\\u73AF\\\\u5F62\\\\u8FDB\\\\u5EA6\\\\u6761\\" }, \\"name\\": \\"DefaultPropValue\\", \\"props\\": { \\"r\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"r\\", \\"required\\": true, \\"type\\": \\"InputNumber\\" }, \\"percent\\": { \\"defaultValue\\": 0, \\"description\\": \\"\\", \\"label\\": \\"percent\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"strokeWidth\\": { \\"defaultValue\\": 8, \\"description\\": \\"\\", \\"label\\": \\"strokeWidth\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"borderOffset\\": { \\"defaultValue\\": 4, \\"description\\": \\"\\", \\"label\\": \\"borderOffset\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"visible\\": { \\"defaultValue\\": true, \\"description\\": \\"\\", \\"label\\": \\"visible\\", \\"required\\": false, \\"type\\": \\"Switch\\" }, \\"edgeSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"centerSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"edgeStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" }, \\"centerStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture HyphenatedPropName.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface HyphenatedPropNameProps {
  /** Button color. */
  \\"button-color\\": \\"blue\\" | \\"green\\";
}

/**
 * A component with a hyphenated prop name.
 */
export const HyphenatedPropNameComponent: React.FC<HyphenatedPropNameProps> = (
  props
) => (
  <button style={{ backgroundColor: props[\\"button-color\\"] }}>
    {props.children}
  </button>
);

try {
    // @ts-ignore
    HyphenatedPropNameComponent.displayName = \\"HyphenatedPropNameComponent\\";
    // @ts-ignore
    HyphenatedPropNameComponent.empPropTypes = { \\"defined\\": { description: \\"A component with a hyphenated prop name.\\" }, \\"name\\": \\"HyphenatedPropNameComponent\\", \\"props\\": { \\"button-color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"button-color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultiProps.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultiPropsComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";

  /** Button size. */
  size: \\"small\\" | \\"large\\";
}

/**
 * This is a component with multiple props.
 */
export const MultiPropsComponent: React.FC<MultiPropsComponentProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultiPropsComponent.displayName = \\"MultiPropsComponent\\";
    // @ts-ignore
    MultiPropsComponent.empPropTypes = { \\"defined\\": { description: \\"This is a component with multiple props.\\" }, \\"name\\": \\"MultiPropsComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } }, \\"size\\": { \\"defaultValue\\": null, \\"description\\": \\"Button size.\\", \\"label\\": \\"size\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"small\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"large\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultilineDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilineDescriptionProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with a multiline description.
 *
 * Second line.
 */
export const MultilineDescriptionComponent: React.FC<MultilineDescriptionProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultilineDescriptionComponent.displayName = \\"MultilineDescriptionComponent\\";
    // @ts-ignore
    MultilineDescriptionComponent.empPropTypes = { \\"defined\\": { description: \\"A component with a multiline description.\\\\n\\\\nSecond line.\\" }, \\"name\\": \\"MultilineDescriptionComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture MultilinePropDescription.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface MultilinePropDescriptionComponentProps {
  /**
   * This is a multiline prop description.
   *
   * Second line.
   */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A component with multiline prop description.
 */
export const MultilinePropDescriptionComponent: React.FC<MultilinePropDescriptionComponentProps> = (
  props
) => <button style={{ backgroundColor: props.color }}>{props.children}</button>;

try {
    // @ts-ignore
    MultilinePropDescriptionComponent.displayName = \\"MultilinePropDescriptionComponent\\";
    // @ts-ignore
    MultilinePropDescriptionComponent.empPropTypes = { \\"defined\\": { description: \\"A component with multiline prop description.\\" }, \\"name\\": \\"MultilinePropDescriptionComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"This is a multiline prop description.\\\\n\\\\nSecond line.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture Simple.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

interface SimpleComponentProps {
  /** Button color. */
  color: \\"blue\\" | \\"green\\";
}

/**
 * A simple component.
 */
export const SimpleComponent: React.FC<SimpleComponentProps> = (props) => (
  <button style={{ backgroundColor: props.color }}>{props.children}</button>
);

try {
    // @ts-ignore
    SimpleComponent.displayName = \\"SimpleComponent\\";
    // @ts-ignore
    SimpleComponent.empPropTypes = { \\"defined\\": { description: \\"A simple component.\\" }, \\"name\\": \\"SimpleComponent\\", \\"props\\": { \\"color\\": { \\"defaultValue\\": null, \\"description\\": \\"Button color.\\", \\"label\\": \\"color\\", \\"required\\": true, \\"type\\": \\"Select\\", \\"options\\": { options: [{ \\"value\\": \\"\\\\\\"blue\\\\\\"\\" }, { \\"value\\": \\"\\\\\\"green\\\\\\"\\" }] } } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`component fixture TextOnlyComponent.tsx has code block generated 1`] = `
"import * as React from \\"react\\";

/**
 * A component with only text content wrapped in a div.
 *
 * Ref: https://github.com/strothj/react-docgen-typescript-loader/issues/7
 */
export const SimpleComponent: React.FC<{}> = () => (
  <div>Test only component</div>
);

try {
    // @ts-ignore
    SimpleComponent.displayName = \\"SimpleComponent\\";
    // @ts-ignore
    SimpleComponent.empPropTypes = { \\"defined\\": { description: \\"A component with only text content wrapped in a div.\\\\n\\\\nRef: https://github.com/strothj/react-docgen-typescript-loader/issues/7\\" }, \\"name\\": \\"SimpleComponent\\", \\"props\\": {} };
}
catch (__react_docgen_typescript_loader_error) { }"
`;

exports[`generates value info for enums 1`] = `
"// import * as React from \\"react\\";

// interface DefaultPropValueComponentProps {
//   /**
//    * Button color.
//    *
//    * @default blue
//    **/
//   color: \\"blue\\" | \\"green\\";

//   /**
//    * Button counter.
//    */
//   counter?: number;

//   /**
//    * Button disabled.
//    */
//   disabled?: boolean;
// }

// /**
//  * Component with a prop with a default value.
//  */
// export const DefaultPropValueComponent: React.FC<DefaultPropValueComponentProps> = (
//   props
// ) => (
//   <button disabled={props.disabled} style={{ backgroundColor: props.color }}>
//     {props.counter}
//     {props.children}
//   </button>
// );

// DefaultPropValueComponent.defaultProps = {
//   counter: 123,
//   disabled: false,
// };
import { genStyles } from \\"@/utils\\";
import React, { HTMLAttributes, useEffect, useState } from \\"react\\";
import defaultStyles from \\"./index.module.scss\\";
export type CircleProgressType = {
  r: number;
  percent?: number;
  strokeWidth?: number;
  borderOffset?: number;
  visible?: boolean;
  edgeSlot?: React.ReactNode;
  centerSlot?: React.ReactNode;
  edgeStyle?: React.HTMLAttributes<HTMLDivElement>[\\"style\\"];
  centerStyle?: React.HTMLAttributes<HTMLDivElement>[\\"style\\"];
};

const styles = genStyles(\\"ge-circle-progress\\", defaultStyles);
/** 环形进度条 */
export const CircleProgress = ({
  r,
  percent = 0,
  strokeWidth = 8,
  borderOffset = 4,
  visible = true,
  edgeSlot,
  centerSlot,
  centerStyle,
  edgeStyle: edgeStyleProps,
  ...otherProps
}: CircleProgressType) => {
  const [edgeStyle, setEdgeStyle] = useState({
    transform: \\"\\",
  });

  const size = {
    width: 2 * r + 2 * strokeWidth + 2 * borderOffset,
    height: 2 * r + 2 * strokeWidth + 2 * borderOffset,
  };

  // 定位edge的位置
  const perimeter = 2 * r * Math.PI;
  const strokeDashoffset = perimeter * (1 - percent);
  const offsetR = r + strokeWidth + borderOffset;
  const circleStyle = {
    strokeWidth: strokeWidth + \\"px\\",
  };
  const circleProps = {
    r: r,
    cx: offsetR,
    cy: offsetR,
  };
  // centerXAxis
  const a = offsetR;
  // centerYAxis
  const b = offsetR;

  // const edgeY = b - offsetR * Math.sqrt(1 - Math.sin(360 * percent) ** 2)
  // const edgeX = a + offsetR * Math.sin(360 * percent)
  // 逆时针，所以x用gsin，y用cos
  const edgeX = a + offsetR * Math.sin((360 * percent * Math.PI) / 180);
  const edgeY = b - offsetR * Math.cos((360 * percent * Math.PI) / 180);

  // 修正edge的位置
  useEffect(() => {
    let transform = \\"\\";
    if (percent > 0.5 && percent <= 1) {
      transform += \`translateX(-100%)\`;
    }

    if ((percent >= 0 && percent < 0.25) || (percent > 0.75 && percent <= 1)) {
      transform += \`translateY(-100%)\`;
    }
    setEdgeStyle({
      transform,
    });
  }, [percent]);

  // if (p)
  return (
    <div
      className={styles.container}
      {...otherProps}
      style={{
        width: size.width + \\"px\\",
        height: size.height + \\"px\\",
        display: visible ? \\"block\\" : \\"none\\",
        // ...otherProps.style,
      }}
    >
      <svg
        className={styles.svg}
        {...size}
        // viewPort=\\"0 0 100 100\\"
        // version=\\"1.1\\"
        // xmlns=\\"http://www.w3.org/2000/svg\\"
      >
        <circle
          className={styles.circle}
          {...circleProps}
          fill=\\"transparent\\"
          strokeDasharray={2 * r * Math.PI}
          strokeDashoffset=\\"0\\"
          style={circleStyle}
        />
        <circle
          className={styles.bar}
          style={circleStyle}
          {...circleProps}
          // 中间是透明
          fill=\\"transparent\\"
          strokeDasharray={2 * r * Math.PI}
          strokeDashoffset={strokeDashoffset}
          transform={\`rotate(-90, \${offsetR}, \${offsetR})\`}
        />
      </svg>
      <div className={styles.centerSlot} style={centerStyle}>
        {centerSlot}
      </div>
      <div
        // ref={edgeRef}
        className={styles.edge}
        style={{
          position: \\"absolute\\",
          left: edgeX + \\"px\\",
          top: edgeY + \\"px\\",
          ...edgeStyle,
          ...edgeStyleProps,
        }}
      >
        {edgeSlot}
      </div>
    </div>
  );
};
export default CircleProgress;

try {
    // @ts-ignore
    CircleProgress.displayName = \\"CircleProgress\\";
    // @ts-ignore
    CircleProgress.empPropTypes = { \\"defined\\": { description: \\"\\\\u73AF\\\\u5F62\\\\u8FDB\\\\u5EA6\\\\u6761\\" }, \\"name\\": \\"CircleProgress\\", \\"props\\": { \\"r\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"r\\", \\"required\\": true, \\"type\\": \\"InputNumber\\" }, \\"percent\\": { \\"defaultValue\\": 0, \\"description\\": \\"\\", \\"label\\": \\"percent\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"strokeWidth\\": { \\"defaultValue\\": 8, \\"description\\": \\"\\", \\"label\\": \\"strokeWidth\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"borderOffset\\": { \\"defaultValue\\": 4, \\"description\\": \\"\\", \\"label\\": \\"borderOffset\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"visible\\": { \\"defaultValue\\": true, \\"description\\": \\"\\", \\"label\\": \\"visible\\", \\"required\\": false, \\"type\\": \\"Switch\\" }, \\"edgeSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"centerSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"edgeStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" }, \\"centerStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }
try {
    // @ts-ignore
    DefaultPropValue.displayName = \\"DefaultPropValue\\";
    // @ts-ignore
    DefaultPropValue.empPropTypes = { \\"defined\\": { description: \\"\\\\u73AF\\\\u5F62\\\\u8FDB\\\\u5EA6\\\\u6761\\" }, \\"name\\": \\"DefaultPropValue\\", \\"props\\": { \\"r\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"r\\", \\"required\\": true, \\"type\\": \\"InputNumber\\" }, \\"percent\\": { \\"defaultValue\\": 0, \\"description\\": \\"\\", \\"label\\": \\"percent\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"strokeWidth\\": { \\"defaultValue\\": 8, \\"description\\": \\"\\", \\"label\\": \\"strokeWidth\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"borderOffset\\": { \\"defaultValue\\": 4, \\"description\\": \\"\\", \\"label\\": \\"borderOffset\\", \\"required\\": false, \\"type\\": \\"InputNumber\\" }, \\"visible\\": { \\"defaultValue\\": true, \\"description\\": \\"\\", \\"label\\": \\"visible\\", \\"required\\": false, \\"type\\": \\"Switch\\" }, \\"edgeSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"centerSlot\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerSlot\\", \\"required\\": false, \\"type\\": \\"Input\\" }, \\"edgeStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"edgeStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" }, \\"centerStyle\\": { \\"defaultValue\\": null, \\"description\\": \\"\\", \\"label\\": \\"centerStyle\\", \\"required\\": false, \\"type\\": \\"StyleEdit\\" } } };
}
catch (__react_docgen_typescript_loader_error) { }"
`;
